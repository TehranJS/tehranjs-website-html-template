///* ========================================================================
//   #LINE-HEIGHT
//   ======================================================================== */

// Generate line-height.
@mixin line-height($line-height, $font-size: $font-size-base, $important: false) {

	@if ($font-size != "") {
		@if (type-of($font-size) == number) {
			@if (unit($font-size) != "px") {
				@error "`#{$font-size}` needs to be a pixel value.";
			}
		} @else {
			@error "`#{$font-size}` needs to be a number.";
		}
	} @else {
		$font-size: $font-size-base;
	}

	@if ($important == true) {
		$important: !important;
	} @elseif ($important == false) {
		$important: null;
	} @else {
		@error "`#{$important}` needs to be `true` or `false`."
	}

	@if ($line-height != "") {
		@if (type-of($line-height) == number) {
			@if (unit($line-height) == "px") {
				line-height: $line-height/$font-size $important;
			} @else {
				@error "`#{$line-height}` needs to be a pixel value.";
			}
		} @elseif (type-of($line-height == 'inherit' or $line-height == 'normal')) {
			line-height: $line-height $important;
		} @elseif ($line-height != 'none' and $line-height != false) {
			@error "Dâ€™oh! `#{$line-height}` is not a valid value for `$line-height`."
		}
	} @else {
		@error "`#{$line-height}` needs to be enter as first parameter."
	}

}
