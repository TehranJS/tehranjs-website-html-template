///* ========================================================================
//   #DPR-MQ
//   ======================================================================== */

/// Breakpoint list
///
/// Name your breakpoints in a way that creates a ubiquitous language
/// across team members. It will improve communication between
/// stakeholders, designers, developers, and testers.
///
/// @type Map
$dpi-breakpoints: (
    poor:  191dpi
) !default;

/// Get a breakpoint's dpi
///
/// @param {String} $name - Name of the breakpoint. One of $dpi-breakpoints
///
/// @example scss
///  $retina-dpi: get-breakpoint-dpi(retina);
///  @media (min-resolution: get-breakpoint-dpi(low)) {}
///
/// @requires {Variable} $dpi-breakpoints
///
/// @returns {Number} Value in pixels
@function get-breakpoint-dpi($name) {
    @if map-has-key($dpi-breakpoints, $name) {
        @return map-get($dpi-breakpoints, $name);
    } @else {
        @warn "Breakpoint #{$name} wasn't found in $dpi-breakpoints.";
    }
}

/**
	* resolution media query
	*/
@mixin dpi-mq(
	$from: false,
	$until: false
) {
	$min-resolution: 0;
	$max-resolution: 0;
	$media-type: 'screen';
	$media-query: '';

	// From: this breakpoint (inclusive)
	@if $from {
		@if type-of($from) == number {
			$min-resolution: $from;
		} @else {
			$min-resolution: get-breakpoint-dpi($from);
		}
	}

	// Until: that breakpoint (exclusive)
	@if $until {
		@if type-of($until) == number {
			$max-resolution: $until;
		} @else {
			$max-resolution: get-breakpoint-dpi($until);
		}
	}

	@if $min-resolution   != 0 { $media-query: '#{$media-query} and (min-resolution: #{$min-resolution})'; }
	@if $max-resolution  != 0 { $media-query: '#{$media-query} and (max-resolution: #{$max-resolution})'; }

	@media #{$media-type + $media-query} {
		@content;
	}
}
